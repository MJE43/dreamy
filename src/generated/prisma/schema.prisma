// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Dream {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  description    String
  mood           Int // Add mood (e.g., 1-5)
  tags           String[] // ⬅︎ switched from delimited string → Postgres text[]
  summaryBullets String? // New: newline-separated markdown bullets summarizing the dream
  userId         String // This will store the Supabase Auth user UUID
  analysis       Analysis? // A dream can have zero or one analysis

  @@index([userId])
}

model Analysis {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String // The actual analysis content from the LLM
  dreamId   String   @unique // Each analysis belongs to exactly one dream
  dream     Dream    @relation(fields: [dreamId], references: [id], onDelete: Cascade)
}

/**
 * ──────────── NEW TABLES FOR SPIRAL-COACH FEATURES ────────────
 */

model SpiralProfile {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  userId        String   @unique // Supabase Auth UUID - Added @unique
  stageBlend    Json? // e.g. {"green":0.6,"orange":0.3,"yellow":0.1} - Classifier output
  dominantBias  String? // optional narrative tag
  rawAnswers    Json? // Dilemma answers: [{ "code": "DILEMMA_01", "choice": "A" }, ...]
  includeDreams Boolean? // User opted to include dreams in initial analysis

  @@index([userId])
}

model Goal {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  title       String
  targetDate  DateTime?
  plan        Json // milestones array
  progressLog Json? // [{date:"…",percent:30}, …]
  completed   Boolean   @default(false)

  @@index([userId])
}

model CheckIn {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  userId      String
  mood        Int
  stressLevel Int?
  notes       String?

  @@index([userId])
}

// Add the new Alert model
model Alert {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String // Which user this alert is for
  type      String // e.g., "mood_dip", "sleep_disruption", "goal_risk"
  message   String // Description of the alert
  isRead    Boolean  @default(false) // Has the user seen this alert?
  // Optional: Add relation to Goal or CheckIn if needed

  @@index([userId, createdAt]) // Index for fetching user alerts
  @@index([userId, isRead]) // Index for fetching unread alerts
}

/**
 * ──────────── NEW TABLE FOR SPIRAL DYNAMICS REFERENCE DATA ────────────
 */

enum RefType {
  STAGE
  DILEMMA
}

model SpiralReference {
  id          String  @id @default(cuid())
  type        RefType
  code        String  @unique // "BEIGE", "BLUE", "DILEMMA_01"
  name        String // "SurvivalSense", "AuthorityStructures"
  description String
  details     Json? // For STAGE: { "tier":1, "order":0 } | For DILEMMA: { "choices":[...] }
  colorHex    String? // #D0E0FF  (only for STAGE rows)

  @@index([type, code])
}
